Pasos para descargar vite
en consola de la compu colocar el código :
npm create vite@latest
Después colocar el nombre al proyecto, seleccionar react en el menu desplegable de colores y dentro clikear en JavaScript+SWC
Abrir en visual la carpeta que se creo y comenzar a trabajar
NO te olvides de instalar la extencion VSC REACT SNIPPETS
desde la consola en visual utilizar el siguiente código 
npm install

funcional component = retorna un html 
jsx= extensión de react que combina html y jscrip, para hacer el código mas reutilizable y que funcione mejor.
el npm intall, instala las dependencias necesarias para trabajar en el proyecto (node_modules)  🙂
npm run dev para abrir la app
clikear en el localhost para que abra el navegador de su preferencia
o ctrl + click

https://icons8.com/icons/set/react
descargar icono y colocarlo en la carpeta src/asests
en index.html reemplazamos el linck

(ctrl+espacio y elegir el linck de favicon, si no te sale va el ejemplo)
<link rel="shortcut icon" type="image/x-icon" href="/src/assets/icons8-react-16.png" />



COMPONENTES: ENCAPSULAN PEQUEÑAS PARTES DE CODIGO QUE CONFORMAN LA INTERFAS COMPLETA DE LO QUE VE EL USUARIO EN LA PAGINA

borrar carpeta public 
de src que quede el main, el favicon
ctrl + s para borrar

snipets rafc ! para armar nuestros componentes en forma de funcion.

NO SE USAN MAS CLASES

las variables van fuera de la funcion de nuestro componente.

al mostrar un array, en la consola del google vemos os microelementos que componen el array, pero en el google pega todo junto, el boolean no se ve ni true ni false
la función la renderiza solo si le ponemos paréntesis
los objetos no se renderizan en react
para renderizar un objeto usar json.stringify(el objeto a mostrar)

las expresiones jsx tienen que tener un solo padre, colocando las const dentro de un fragment <> y </>

Stilos de react!
Crear archivo estilos.css 
importar en el main y armar tu css a tu manera
para los componentes podemos armar un archivo css de ese componente, también armar carpeta de estilos donde este todo, o tenes un componente con su estilo y cosas en una carpeta!
props: propiedades, mecanismo que pasa info de un componente padre a hijo, objetos que permiten comunicación entre componentes.


MAIN 
import React from 'react'
import ReactDOM from 'react-dom/client'
import {PrimerComponente} from './PrimerComponente'
import './styles.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <PrimerComponente />
  </React.StrictMode>,
)

PRIMER COMPONENTE

import "./PrimerComponente.css"

const string = "Esto es un texto"
const number =  153426486759
const array = ["Hola grupo", "Somos muchos", 10]
const boolean = true
const funcion = () => 1 + 1
const objeto =  { nombre: "Curso con pao", duracion: 4 }
const fecha = new Date()
export const PrimerComponente = () => {
  return (
    <>
    <h1>Props</h1>
    {/*<h1>Variables en JSX</h1>
     <h3>String</h3> <p> {string} </p>
    <h3>number</h3> <p> {number} </p>
    <h3>array</h3> <p> {array} </p>
    <h3>Boolean</h3> <p> {boolean} </p>
    <h3>funcion</h3> <p> {funcion()} </p>
    <h3>objeto</h3> <p> {JSON.stringify(objeto)} </p>
    <h3>fecha</h3> <p> {JSON.stringify(fecha)} </p> */}
    </>
  )
}


las variables van fuera por que asi no se renderizan cada ves que modificamos algo 


Props! clase 15/9

objeto vacio. 

proptypes; si lo importamos podemos definir el tipo de prop que esperamos, y si requerimos o no un valor.

podemos poner la prop como default y darle un valor. lo que escribas en el main(padre) tiene prioridad ante el dafault

Eventos: mecanismos por los cuales los componentes reaccionan a la interaccion del usuario, por ejemplo un click.


export const ContadorApp = () => {
  return (
    <>
    <h1>contador</h1>
    <button onClick={ function (event) {console.log(event)}}>
     soy un boton 
    </button>
    </>
    
  )
}
(NOS SIRVE PARA SABER EN QUE PARTE DE LA PANTALLA SE HACE CLICK)



export const ContadorApp = () => {
    function handleClick(event) {
        console.log(event)}
  return (
    <>
    <h1>contador</h1>
    <button onClick={handleClick }>
     soy un boton 
    </button>
    </>
    
  )
}
(Asi pasamos un solo argumento (MANERA MAS CORRECTA DE HACERLO))

PARA QUITAR TODO AFUERA!! 

function handleClick(event) {
    console.log(event)
}

const Boton = () => {
    return (
        <button onClick = { handleClick } >
        soy un boton 
        </button>
    )

}

export const ContadorApp = () => {

    return (
        <>
            <h1>contador</h1>
            <Boton></Boton>
        </>

    )
}


Cambios de estado! --> CUENTA PERO NO SE VE EN LA PANTALLA
export const ContadorApp = ({ value }) => {
  
    const handleClick = () => {
      value += 1
      console.log(value)
    }
  
    return (
      <>
        <h1>Contador: </h1>
        <p>{value}</p>
        <button onClick={handleClick}>
          Soy un boton
        </button>
      </>
    )
  }


HOOKS!! una funcion especial que utiliza funciones de react en un componente de tipo funcion donde manejamos el estado y otras caracteristicas sin usar el componente clase, podemos hacer nuestros propios pero hay predefinidos, es una manera de hacer una funcion facil, definida y reutilizable.
 estado:  objeto que contiene datos y representa la info que una interfas de usuario necesita para renderizarse y funcionar correctamente. es mutable y tiene los datos que necesita un componente para funcionar bien. a traves de hooks o contructores uno modifica el estado y react modifica la parte del componente que modifica el usuario.

USESTATE: codigo con use state.

 const   [contador, setContador ] = useState(value)

    const handleClick = () => {
      setContador(contador+1)
    }
  
    return (
      <>
        <h1>Contador: </h1>
        <p>{contador}</p>
        <button onClick={handleClick}>
          Soy un boton
        </button>
      </>
    )
  }

ATAJOS DE TECLADO: 
ctr+KC comentar
ctr+KU descomentar
clikea donde queres empezar +alt+shift (escribir una ves en muchas lineas a la vez)
windous + . para poner emogies

condicionales y ternarios: (Codigo completo en git, componente(ListaApp))

 return (
        <li>{nombre}
            {visto ? '👌' : '😒'  } </li>
    )

? para que muestre un emogie para true 👌 y para false 😒 .
..........................


 return (
        <li>{nombre}
            {visto  && '👌'} </li>
    )

 doble &&, para que solo muestre true.

MAP: junto con usestate, podemos barrer un arreglo y generar microcomponentes.

atomdesing= es un enfoque de diseño de interfas de usuario, se basa en creacion de componentes reutilizables, empezando por moleculas hasta grandes organos. como botones por ejemplo.

SPLET OPERATOR : Forma correcta de añadir un elemento a un array (ListaApp.jsx)


    const addTask = () => {
        setArreglo([...arreglo, { nombre: "nuevo", visto: false }])
    }


    let listadosecciones = [
        { nombre: "Instalaciones necesarias", visto: true },
        { nombre: "Uso de Vite", visto: true },
        { nombre: "Componentes", visto: true },
        { nombre: "Variables en JSX", visto: true },
        { nombre: "Props", visto: true },
        { nombre: "Eventos", visto: true },
        { nombre: "useState", visto: true },
        { nombre: "Redux", visto: false },
        { nombre: "customHooks", visto: false },
    ]

    const [arreglo, setArreglo] = useState(listadosecciones)

    return (
        <>
            <h1>Listado de temas del curso </h1>
            <ol>
                {arreglo.map(item => <Items nombre={item.nombre} visto={item.visto} key={item.nombre} > </Items>)}
            </ol>

            <button onClick={() => addTask()} > Agregar tarea </button>

        </>


    )


classname : se utiliza por que, el codigo no es html es jsx, y por ello en react se utiliza en lugar de class. todo para darle estilo a una sola seccion de texto u otra cosa.

Formulario: 

imput, donde la escucha de los eventos se setea en los estados y podeos usar esa info

manteniendo apretado alt, con flecha subimos o bajamos la linea de texto.

en el componente(AgregarTareas) llamado por la clase listaapp y esta llamada a su ves en el padre(main), tenemos un formulario con un input dentro que contiene un escuchador de evento de cambio que con una funcion setea el nuevovalor del  estado del input, a la ves el formulario a traves de onsubmit escucha y hace que la pagina no se recargue(preventDefault) y nos imprime en consola el valor de lo que escribimos

comunicacion de componentes: como un padre hace funciones y las modifica el hijo.
esta "funcion" (propiedad)
         <AgregarTarea agregarTareas={setArreglo}></AgregarTarea>
en el padre(listaapp), nos permite pasarle info al hijo(AgregarTarea)
	export const AgregarTarea = ({agregarTareas}) => {
y en esta se puede modificar el padre (agregando de a un item mas a la lista)
	const onSubmit = (event) => {
        const envio = {
            nombre : imputValue,
            visto : false
        }
        event.preventDefault()
        agregarTareas(tareas => [...tareas, envio])
    }

envio de info de child: seccion 15

forma correcta de la seccon anterior. donde el hijo envia la info se valida y el padre la resive y la guarda.
CLASE PADRE
 const onAgregarTarea = (val) => {
        if(val < 1) return 
        const envio = {
            id: arreglo.length + 1,
            nombre: val,
            visto: false
        }
        setArreglo([...arreglo, envio])
        console.log(envio)

    }

si hay espacios al principio, para que nos tome de igual manera el item .

 const onAgregarTarea = (val) => {
	let valor = val.trim()
        if(valor < 1) return 
        const envio = {
            id: arreglo.length + 1,
            nombre: valor,
            visto: false
        }
        setArreglo([...arreglo, envio])
        console.log(envio)

    }

manera correcta la de arriba.

seccion 16 : useEffect y Fetch
hook que es el efecto secundario de algo, permite que no se ejecute infinitamente, o muchas veces. eso significa que al fech lo llama una sola ves.  
strictmode: analiza que no haya errores por eso por consola se ve que se llama dos veces. en realidad llama una.
usamos usestate para mantenes el estado de los usuario, fetch para cargar los usuarios de la api (traerlos a nuestro codiggo ), lo pasamos a json y lo seteamos en el array del useState  despues el useefect para que solo lo cargue solo una ves, y al comienzo. 

sin useEfect:

		import { useEffect, useState } from "react"

export const UsersApp = () => {

    const [users, setUsers] = useState([])
    const fetchUsers = async() => {
        try{
            const response = await fetch('https://jsonplaceholder.typicode.com/users') 
            const data = await response.json()
            console.log(data)
            setUsers(data)
        }catch(error){
            console.error(error)
        }
    }
 
    const handleFetch = () => {
        fetchUsers()
    }

    // useEffect(( ) => {
    //     fetchUsers()
    //  } , [ ])

  return (
   <>
   <h1>Lista de usuarios</h1>


   <ul>
    {users.map(user => <li key={user.id}> nombre:  {user.name} email : {user.email} </li>)}
   </ul>

   <button onClick={handleFetch}>Usuarios API</button>

   </>
  )
}

acento grave : alt + 96 

resumen: creamos un componente nuevo (userlist) y le pasamos el endponit(el final del url), uasmos un useState que inicia en users y cuando hagamos click en el boton cambia a comments, (cambia de endpoint), en el componente(userlist) esperamos el endpoint, el useEffect utiliza el endpoint inicial y carga una ves, pero al clickear el botton cambia y vuelve a cargar pero con la nueva informacion. 

 useEffect(() => {
        fetchdata()
    }, [endPoint])

en el return del componente(userlist) "escribo" el nombre si es users o el body si es comments. con un ternario (if)

		 <ul>
                {endPoint == 'users' ? data.map(item => <li key={item.id}> {item.nombre} </li>)
                    : data.map(item => <li key={item.id}> {item.body} </li>)}
            </ul>

si en el useEfect no colocamos nada entre corchetes 

 useEffect(() => {
        fetchdata()
    }, [])

entonces no va a llamar al fetch y no va a ejecutar la lista de comentarios de la api. no va a cambiar nada.

seccion 17 : build y dist 


seccion 18 :customhooks

creamos el userFetchData


FUNCION FLECHA :

Para hacer el snippets de función flecha:
CTRL + Shift + P
Tipear snippets en la barra de busqueda
ENTER en Configure User Snippets
Elegir javascript.json
Se abate un archivo y hay que copiar el siguiente código entre las llaves:
"Arrow function with params": {
"prefix": "afunp",
"body": [
"const ${1:name} = (${2:params}) => {",
"   ${3://content}",
"};",
"$0"
],
"description": "Arrow function with params"
},
